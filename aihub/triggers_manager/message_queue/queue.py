import json
import time

import redis


class RedisQueue:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏ –≤ Redis, –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
    –∏–º–µ–µ—Ç —Å–≤–æ–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ (TTL).
    """

    def __init__(self, redis_conn: redis.Redis, queue_name: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—á–µ—Ä–µ–¥—å.

        :param redis_conn: –ê–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis (–æ–±—ä–µ–∫—Ç redis.Redis).
        :param queue_name: –ò–º—è –∫–ª—é—á–∞ –≤ Redis, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –æ—á–µ—Ä–µ–¥–∏.
        """
        if not isinstance(redis_conn, redis.Redis):
            raise TypeError("redis_conn –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º redis.Redis")
        self.redis = redis_conn
        self.queue_name = queue_name

    def push(self, item: any, ttl_seconds: int):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏.

        :param item: –≠–ª–µ–º–µ–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–≥–æ —Ç–∏–ø–∞,
                     –∫–æ—Ç–æ—Ä—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ JSON).
        :param ttl_seconds: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
        """
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —ç–ª–µ–º–µ–Ω—Ç "–ø—Ä–æ—Ç—É—Ö–Ω–µ—Ç"
        expires_at = time.time() + ttl_seconds

        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å
        payload = {"data": item, "expires_at": expires_at}

        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (LPUSH)
        self.redis.lpush(self.queue_name, json.dumps(payload))
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: {item} (TTL: {ttl_seconds} —Å–µ–∫)")

    def pop(self) -> any:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –≤–∞–ª–∏–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –∫–æ–Ω—Ü–∞ –æ—á–µ—Ä–µ–¥–∏.

        –ï—Å–ª–∏ —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, –æ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è, –∏ –¥–µ–ª–∞–µ—Ç—Å—è
        –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å —Å–ª–µ–¥—É—é—â–∏–π. –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–∫–∞ –Ω–µ –±—É–¥–µ—Ç
        –Ω–∞–π–¥–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –æ—á–µ—Ä–µ–¥—å –Ω–µ –æ–ø—É—Å—Ç–µ–µ—Ç.

        :return: –î–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ None, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.
        """
        while True:
            # –ê—Ç–æ–º–∞—Ä–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ (RPOP)
            serialized_payload = self.redis.rpop(self.queue_name)

            if serialized_payload is None:
                # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
                return None

            payload = json.loads(serialized_payload)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
            if time.time() < payload["expires_at"]:
                # –≠–ª–µ–º–µ–Ω—Ç –≤–∞–ª–∏–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
                print(f"üî∑ –ò–∑–≤–ª–µ—á–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç: {payload['data']}")
                return payload["data"]
            else:
                # –≠–ª–µ–º–µ–Ω—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, –æ–Ω –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
                print(f"‚ùå –≠–ª–µ–º–µ–Ω—Ç {payload['data']} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –∏ —É–¥–∞–ª–µ–Ω.")
                # –¶–∏–∫–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç

    def size(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã,
        –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã).

        :return: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ Redis.
        """
        return self.redis.llen(self.queue_name)

    def is_empty(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—É—Å—Ç–∞ –ª–∏ –æ—á–µ—Ä–µ–¥—å.

        :return: True, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∏–Ω–∞—á–µ False.
        """
        return self.size() == 0
